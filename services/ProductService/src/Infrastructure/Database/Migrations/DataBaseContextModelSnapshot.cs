// <auto-generated />
using System;
using Infrastructure.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Title");

                    b.ToTable("categories", null, t =>
                        {
                            t.HasCheckConstraint("CK_Category_Parent", "parent_category_id != id");

                            t.HasCheckConstraint("CK_Title_Length", "LENGTH(title) > 4 AND LENGTH(title) < 60");

                            t.HasCheckConstraint("CK_Updated_At_Length", "created_at <= updated_at");
                        });
                });

            modelBuilder.Entity("Domain.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8, 0)")
                        .HasColumnName("price");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(2, 1)")
                        .HasColumnName("rating");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("seller_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Price");

                    b.HasIndex("Rating");

                    b.HasIndex("Title");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("CK_Description_Length", "LENGTH(description) > 0 AND LENGTH(description) < 6000");

                            t.HasCheckConstraint("CK_Product_Price_Range", "price BETWEEN 50 AND 10000000");

                            t.HasCheckConstraint("CK_Product_Rating_Range", "rating BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_Title_Length", "LENGTH(title) > 5 AND LENGTH(title) < 200");

                            t.HasCheckConstraint("CK_Updated_At_Length", "created_at <= updated_at");
                        });
                });

            modelBuilder.Entity("Domain.Category.Category", b =>
                {
                    b.HasOne("Domain.Category.Category", null)
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Product.Product", b =>
                {
                    b.HasOne("Domain.Category.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
